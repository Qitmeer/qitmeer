// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merkleblocks.proto

package qitmeer_p2p_v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MerkleBlockRequest struct {
	Hashes               []*Hash  `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty" ssz-max:"2000"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleBlockRequest) Reset()         { *m = MerkleBlockRequest{} }
func (m *MerkleBlockRequest) String() string { return proto.CompactTextString(m) }
func (*MerkleBlockRequest) ProtoMessage()    {}
func (*MerkleBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fca2b5267be08f9, []int{0}
}
func (m *MerkleBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleBlockRequest.Merge(m, src)
}
func (m *MerkleBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *MerkleBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleBlockRequest proto.InternalMessageInfo

func (m *MerkleBlockRequest) GetHashes() []*Hash {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type MerkleBlock struct {
	Header               []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty" ssz-max:"256"`
	Transactions         uint64   `protobuf:"varint,2,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Hashes               []*Hash  `protobuf:"bytes,3,rep,name=hashes,proto3" json:"hashes,omitempty" ssz-max:"104858"`
	Flags                []byte   `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty" ssz-max:"256"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleBlock) Reset()         { *m = MerkleBlock{} }
func (m *MerkleBlock) String() string { return proto.CompactTextString(m) }
func (*MerkleBlock) ProtoMessage()    {}
func (*MerkleBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fca2b5267be08f9, []int{1}
}
func (m *MerkleBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleBlock.Merge(m, src)
}
func (m *MerkleBlock) XXX_Size() int {
	return m.Size()
}
func (m *MerkleBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleBlock proto.InternalMessageInfo

func (m *MerkleBlock) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MerkleBlock) GetTransactions() uint64 {
	if m != nil {
		return m.Transactions
	}
	return 0
}

func (m *MerkleBlock) GetHashes() []*Hash {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *MerkleBlock) GetFlags() []byte {
	if m != nil {
		return m.Flags
	}
	return nil
}

type MerkleBlockResponse struct {
	Data                 []*MerkleBlock `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" ssz-max:"2000"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MerkleBlockResponse) Reset()         { *m = MerkleBlockResponse{} }
func (m *MerkleBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MerkleBlockResponse) ProtoMessage()    {}
func (*MerkleBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fca2b5267be08f9, []int{2}
}
func (m *MerkleBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleBlockResponse.Merge(m, src)
}
func (m *MerkleBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MerkleBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleBlockResponse proto.InternalMessageInfo

func (m *MerkleBlockResponse) GetData() []*MerkleBlock {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MerkleBlockRequest)(nil), "qitmeer.p2p.v1.MerkleBlockRequest")
	proto.RegisterType((*MerkleBlock)(nil), "qitmeer.p2p.v1.MerkleBlock")
	proto.RegisterType((*MerkleBlockResponse)(nil), "qitmeer.p2p.v1.MerkleBlockResponse")
}

func init() { proto.RegisterFile("merkleblocks.proto", fileDescriptor_1fca2b5267be08f9) }

var fileDescriptor_1fca2b5267be08f9 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0x02, 0x41,
	0x10, 0x86, 0x5d, 0x41, 0x8a, 0x05, 0x09, 0xae, 0x14, 0x17, 0x4c, 0x0e, 0xb2, 0x8d, 0x58, 0xb0,
	0x1c, 0x28, 0x86, 0x58, 0x99, 0xb3, 0xb1, 0xb1, 0xa1, 0xb0, 0xb0, 0xdb, 0x83, 0xe1, 0x8e, 0xc0,
	0xb1, 0xc7, 0xcd, 0x62, 0x8c, 0x4f, 0xe2, 0x23, 0x69, 0xe7, 0x13, 0x10, 0x83, 0x6f, 0xc0, 0x13,
	0x18, 0x16, 0x72, 0x72, 0x46, 0xed, 0x76, 0x76, 0xe7, 0x9b, 0xff, 0xcb, 0x2c, 0x65, 0x21, 0xc4,
	0xe3, 0x09, 0x78, 0x13, 0xd5, 0x1f, 0xa3, 0x88, 0x62, 0xa5, 0x15, 0x2b, 0xce, 0x46, 0x3a, 0x04,
	0x88, 0x45, 0xd4, 0x8e, 0xc4, 0x63, 0xab, 0xd2, 0xf0, 0x47, 0x3a, 0x98, 0x7b, 0xa2, 0xaf, 0xc2,
	0xa6, 0xaf, 0x7c, 0xd5, 0x34, 0x6d, 0xde, 0x7c, 0x68, 0x2a, 0x53, 0x98, 0xd3, 0x06, 0xaf, 0x14,
	0x43, 0x40, 0x94, 0x3e, 0x6c, 0xc7, 0xf1, 0x7b, 0xca, 0xee, 0x4c, 0x88, 0xbb, 0x0e, 0xe9, 0xc1,
	0x6c, 0x0e, 0xa8, 0xd9, 0x35, 0xcd, 0x05, 0x12, 0x03, 0x40, 0x8b, 0xd4, 0x32, 0xf5, 0x7c, 0xbb,
	0x2c, 0xd2, 0xa9, 0xe2, 0x56, 0x62, 0xe0, 0xb2, 0xd5, 0xa2, 0x5a, 0x44, 0x7c, 0x6e, 0x84, 0xf2,
	0xe9, 0x8a, 0xb7, 0x1d, 0xc7, 0xe1, 0xbd, 0x2d, 0xc7, 0xdf, 0x08, 0xcd, 0xef, 0x0c, 0x66, 0x67,
	0x34, 0x17, 0x80, 0x1c, 0x40, 0x6c, 0x91, 0x1a, 0xa9, 0x17, 0xdc, 0xa3, 0xd5, 0xa2, 0x7a, 0xf8,
	0xcd, 0x76, 0x2e, 0xd7, 0xa8, 0x69, 0x60, 0x9c, 0x16, 0x74, 0x2c, 0xa7, 0x28, 0xfb, 0x7a, 0xa4,
	0xa6, 0x68, 0xed, 0xd7, 0x48, 0x3d, 0xdb, 0x4b, 0xdd, 0x31, 0x37, 0x11, 0xcc, 0xfc, 0x23, 0x58,
	0x5e, 0x2d, 0xaa, 0xa5, 0x24, 0xa4, 0xe5, 0x5c, 0x74, 0x3b, 0xdd, 0x44, 0x91, 0x9d, 0xd2, 0x83,
	0xe1, 0x44, 0xfa, 0x68, 0x65, 0xff, 0x32, 0xda, 0xbc, 0xf3, 0x07, 0x7a, 0x9c, 0xda, 0x11, 0x46,
	0x6a, 0x8a, 0xc0, 0x6e, 0x68, 0x76, 0x20, 0xb5, 0xdc, 0xae, 0xe8, 0xe4, 0xa7, 0xc1, 0x0e, 0xf2,
	0xeb, 0xa6, 0x0c, 0xec, 0x96, 0x5e, 0x97, 0x36, 0x79, 0x5f, 0xda, 0xe4, 0x63, 0x69, 0x93, 0x97,
	0x4f, 0x7b, 0xcf, 0xcb, 0x99, 0x8f, 0x39, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x1b, 0xb5,
	0xec, 0xfd, 0x01, 0x00, 0x00,
}

func (m *MerkleBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerkleblocks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MerkleBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Flags) > 0 {
		i -= len(m.Flags)
		copy(dAtA[i:], m.Flags)
		i = encodeVarintMerkleblocks(dAtA, i, uint64(len(m.Flags)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerkleblocks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Transactions != 0 {
		i = encodeVarintMerkleblocks(dAtA, i, uint64(m.Transactions))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintMerkleblocks(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MerkleBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerkleblocks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerkleblocks(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerkleblocks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MerkleBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, e := range m.Hashes {
			l = e.Size()
			n += 1 + l + sovMerkleblocks(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerkleBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovMerkleblocks(uint64(l))
	}
	if m.Transactions != 0 {
		n += 1 + sovMerkleblocks(uint64(m.Transactions))
	}
	if len(m.Hashes) > 0 {
		for _, e := range m.Hashes {
			l = e.Size()
			n += 1 + l + sovMerkleblocks(uint64(l))
		}
	}
	l = len(m.Flags)
	if l > 0 {
		n += 1 + l + sovMerkleblocks(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerkleBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovMerkleblocks(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMerkleblocks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerkleblocks(x uint64) (n int) {
	return sovMerkleblocks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MerkleBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkleblocks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, &Hash{})
			if err := m.Hashes[len(m.Hashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkleblocks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkleblocks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			m.Transactions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transactions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, &Hash{})
			if err := m.Hashes[len(m.Hashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = append(m.Flags[:0], dAtA[iNdEx:postIndex]...)
			if m.Flags == nil {
				m.Flags = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkleblocks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkleblocks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MerkleBlock{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkleblocks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerkleblocks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerkleblocks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerkleblocks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkleblocks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerkleblocks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerkleblocks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerkleblocks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerkleblocks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerkleblocks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerkleblocks = fmt.Errorf("proto: unexpected end of group")
)
