// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainstate.proto

package qitmeer_p2p_v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChainState struct {
	GenesisHash          *Hash       `protobuf:"bytes,1,opt,name=genesisHash,proto3" json:"genesisHash,omitempty"`
	ProtocolVersion      uint32      `protobuf:"varint,2,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	Timestamp            uint64      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Services             uint64      `protobuf:"varint,4,opt,name=services,proto3" json:"services,omitempty"`
	GraphState           *GraphState `protobuf:"bytes,5,opt,name=graphState,proto3" json:"graphState,omitempty"`
	UserAgent            []byte      `protobuf:"bytes,6,opt,name=userAgent,proto3" json:"userAgent,omitempty" ssz-max:"256"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChainState) Reset()         { *m = ChainState{} }
func (m *ChainState) String() string { return proto.CompactTextString(m) }
func (*ChainState) ProtoMessage()    {}
func (*ChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_42d14f768699ae63, []int{0}
}
func (m *ChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainState.Merge(m, src)
}
func (m *ChainState) XXX_Size() int {
	return m.Size()
}
func (m *ChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainState.DiscardUnknown(m)
}

var xxx_messageInfo_ChainState proto.InternalMessageInfo

func (m *ChainState) GetGenesisHash() *Hash {
	if m != nil {
		return m.GenesisHash
	}
	return nil
}

func (m *ChainState) GetProtocolVersion() uint32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *ChainState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChainState) GetServices() uint64 {
	if m != nil {
		return m.Services
	}
	return 0
}

func (m *ChainState) GetGraphState() *GraphState {
	if m != nil {
		return m.GraphState
	}
	return nil
}

func (m *ChainState) GetUserAgent() []byte {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

type GraphState struct {
	Total                uint32   `protobuf:"varint,100,opt,name=total,proto3" json:"total,omitempty"`
	Layer                uint32   `protobuf:"varint,101,opt,name=layer,proto3" json:"layer,omitempty"`
	MainHeight           uint32   `protobuf:"varint,102,opt,name=mainHeight,proto3" json:"mainHeight,omitempty"`
	MainOrder            uint32   `protobuf:"varint,103,opt,name=mainOrder,proto3" json:"mainOrder,omitempty"`
	Tips                 []*Hash  `protobuf:"bytes,104,rep,name=tips,proto3" json:"tips,omitempty" ssz-max:"100"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphState) Reset()         { *m = GraphState{} }
func (m *GraphState) String() string { return proto.CompactTextString(m) }
func (*GraphState) ProtoMessage()    {}
func (*GraphState) Descriptor() ([]byte, []int) {
	return fileDescriptor_42d14f768699ae63, []int{1}
}
func (m *GraphState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphState.Merge(m, src)
}
func (m *GraphState) XXX_Size() int {
	return m.Size()
}
func (m *GraphState) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphState.DiscardUnknown(m)
}

var xxx_messageInfo_GraphState proto.InternalMessageInfo

func (m *GraphState) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GraphState) GetLayer() uint32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *GraphState) GetMainHeight() uint32 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *GraphState) GetMainOrder() uint32 {
	if m != nil {
		return m.MainOrder
	}
	return 0
}

func (m *GraphState) GetTips() []*Hash {
	if m != nil {
		return m.Tips
	}
	return nil
}

type Hash struct {
	Hash                 []byte   `protobuf:"bytes,200,opt,name=hash,proto3" json:"hash,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_42d14f768699ae63, []int{2}
}
func (m *Hash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return m.Size()
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainState)(nil), "qitmeer.p2p.v1.ChainState")
	proto.RegisterType((*GraphState)(nil), "qitmeer.p2p.v1.GraphState")
	proto.RegisterType((*Hash)(nil), "qitmeer.p2p.v1.Hash")
}

func init() { proto.RegisterFile("chainstate.proto", fileDescriptor_42d14f768699ae63) }

var fileDescriptor_42d14f768699ae63 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0x66, 0x5a, 0xb7, 0xa2, 0xaf, 0x14, 0xca, 0xa8, 0x8b, 0x51, 0x84, 0x8c, 0x35, 0x0b, 0xe4,
	0x4d, 0x9d, 0xd6, 0x15, 0x5d, 0x84, 0x15, 0x65, 0x41, 0x77, 0x48, 0x46, 0x62, 0x3f, 0x71, 0x5f,
	0xc6, 0x23, 0xc5, 0x1e, 0x33, 0x33, 0x89, 0x20, 0xf7, 0x40, 0xe2, 0x1e, 0x5c, 0x22, 0x4b, 0x4e,
	0x80, 0x50, 0xb8, 0x01, 0x27, 0x40, 0x7e, 0x91, 0xe2, 0x24, 0x12, 0x3b, 0x7f, 0x3f, 0xf3, 0xf9,
	0x7b, 0xef, 0xc1, 0x79, 0x59, 0x29, 0xd3, 0xf8, 0xa0, 0x02, 0x66, 0xad, 0xb3, 0xc1, 0xf2, 0xa7,
	0x9f, 0x4d, 0xa8, 0x11, 0x5d, 0xd6, 0xe6, 0x6d, 0x36, 0xbf, 0x1e, 0x5c, 0x6a, 0x13, 0xaa, 0xd9,
	0x38, 0x2b, 0x6d, 0x3d, 0xd4, 0x56, 0xdb, 0x21, 0xd9, 0xc6, 0xb3, 0x09, 0x21, 0x02, 0xf4, 0xb5,
	0x7e, 0x2e, 0xbf, 0x1d, 0x00, 0xbc, 0xeb, 0x32, 0x3f, 0x76, 0x99, 0xfc, 0x16, 0x4e, 0x35, 0x36,
	0xe8, 0x8d, 0xbf, 0x57, 0xbe, 0x12, 0x2c, 0x61, 0xe9, 0x69, 0x7e, 0x91, 0xed, 0xfe, 0x23, 0xeb,
	0xb4, 0x62, 0xdb, 0xc8, 0x53, 0x78, 0x46, 0x79, 0xa5, 0x9d, 0x7e, 0x42, 0xe7, 0x8d, 0x6d, 0xc4,
	0x41, 0xc2, 0xd2, 0xb3, 0x62, 0x9f, 0xe6, 0x2f, 0xe0, 0x24, 0x98, 0x1a, 0x7d, 0x50, 0x75, 0x2b,
	0x0e, 0x13, 0x96, 0x46, 0x45, 0x4f, 0xf0, 0x01, 0x3c, 0xf6, 0xe8, 0xe6, 0xa6, 0x44, 0x2f, 0x22,
	0x12, 0x37, 0x98, 0x8f, 0x00, 0xb4, 0x53, 0x6d, 0x45, 0x4d, 0xc5, 0x11, 0x55, 0x1b, 0xec, 0x57,
	0x7b, 0xbf, 0x71, 0x14, 0x5b, 0x6e, 0x3e, 0x84, 0x93, 0x99, 0x47, 0xf7, 0x56, 0x63, 0x13, 0xc4,
	0x71, 0xc2, 0xd2, 0x27, 0x77, 0xcf, 0xff, 0xfe, 0x7a, 0x79, 0xe6, 0xfd, 0xe2, 0xb2, 0x56, 0x5f,
	0x46, 0x32, 0x7f, 0x7d, 0x2b, 0x8b, 0xde, 0x23, 0x7f, 0x30, 0x80, 0x3e, 0x8b, 0x5f, 0xc0, 0x51,
	0xb0, 0x41, 0x4d, 0xc5, 0x03, 0x4d, 0xb5, 0x06, 0x1d, 0x3b, 0x55, 0x5f, 0xd1, 0x09, 0x5c, 0xb3,
	0x04, 0x78, 0x0c, 0x50, 0x2b, 0xd3, 0xdc, 0xa3, 0xd1, 0x55, 0x10, 0x13, 0x92, 0xb6, 0x98, 0x6e,
	0x03, 0x1d, 0xfa, 0xe0, 0x1e, 0xd0, 0x09, 0x4d, 0x72, 0x4f, 0xf0, 0x37, 0x10, 0x05, 0xd3, 0x7a,
	0x51, 0x25, 0x87, 0xff, 0x5b, 0xfd, 0x5e, 0xf5, 0xeb, 0xab, 0x2b, 0x59, 0xd0, 0x23, 0x99, 0x41,
	0x44, 0xe7, 0x78, 0x05, 0x51, 0xd5, 0xdd, 0x6f, 0xc9, 0x76, 0x47, 0xf5, 0x66, 0x81, 0x23, 0x79,
	0x93, 0xcb, 0x82, 0xf4, 0xbb, 0xf3, 0xe5, 0x2a, 0x66, 0x3f, 0x57, 0x31, 0xfb, 0xbd, 0x8a, 0xd9,
	0xf7, 0x3f, 0xf1, 0xa3, 0xf1, 0x31, 0xdd, 0xeb, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7,
	0x10, 0xd9, 0x41, 0x69, 0x02, 0x00, 0x00,
}

func (m *ChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintChainstate(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x32
	}
	if m.GraphState != nil {
		{
			size, err := m.GraphState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Services != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Services))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.ProtocolVersion != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.ProtocolVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.GenesisHash != nil {
		{
			size, err := m.GenesisHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GraphState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tips) > 0 {
		for iNdEx := len(m.Tips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainstate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.MainOrder != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.MainOrder))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.MainHeight != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.MainHeight))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Layer != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Total != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintChainstate(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainstate(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainstate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisHash != nil {
		l = m.GenesisHash.Size()
		n += 1 + l + sovChainstate(uint64(l))
	}
	if m.ProtocolVersion != 0 {
		n += 1 + sovChainstate(uint64(m.ProtocolVersion))
	}
	if m.Timestamp != 0 {
		n += 1 + sovChainstate(uint64(m.Timestamp))
	}
	if m.Services != 0 {
		n += 1 + sovChainstate(uint64(m.Services))
	}
	if m.GraphState != nil {
		l = m.GraphState.Size()
		n += 1 + l + sovChainstate(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovChainstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 2 + sovChainstate(uint64(m.Total))
	}
	if m.Layer != 0 {
		n += 2 + sovChainstate(uint64(m.Layer))
	}
	if m.MainHeight != 0 {
		n += 2 + sovChainstate(uint64(m.MainHeight))
	}
	if m.MainOrder != 0 {
		n += 2 + sovChainstate(uint64(m.MainOrder))
	}
	if len(m.Tips) > 0 {
		for _, e := range m.Tips {
			l = e.Size()
			n += 2 + l + sovChainstate(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovChainstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChainstate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainstate(x uint64) (n int) {
	return sovChainstate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisHash == nil {
				m.GenesisHash = &Hash{}
			}
			if err := m.GenesisHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			m.Services = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Services |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphState == nil {
				m.GraphState = &GraphState{}
			}
			if err := m.GraphState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = append(m.UserAgent[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAgent == nil {
				m.UserAgent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHeight", wireType)
			}
			m.MainHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainOrder", wireType)
			}
			m.MainOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tips = append(m.Tips, &Hash{})
			if err := m.Tips[len(m.Tips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainstate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainstate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainstate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainstate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainstate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainstate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainstate = fmt.Errorf("proto: unexpected end of group")
)
